
/*==========================================================================
=Programmeur : Houda Serji
=Description : Programme qui gère les dossiers de notes des étudiants 
               en permettant d'ajouter les données des étudiants, leurs 
               cours et les notes données pour chque cours.
=Date        : 2021 / 04 / 24
=Source      : Classe Assurance de qualité de logilciel, La Cité Collégiale
===========================================================================*/

/**************************Classe Etudiant****************************************
**********************************************************************************
**********************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjetFinalAQL
{
    // La classe Etudiant sert le projet la gestion de les informations concernant chaque nouveau étudiant ajouté dans le système
    class Etudiant
    {
        private int identufiantDeLetudiant;
        private string prenom;
        private string nom;
        private Cours cours;
        private Notes note;

        //constructeur par défaut 
        public Etudiant()
        {
            this.identufiantDeLetudiant = 0;
            this.prenom = "";
            this.nom = "";
            this.note = new Notes();
        }

        //Surcharge de la classe Etudiant
        public Etudiant(int idEtudiant, string prenomEtudiant, string nomEtudiant, char lettre, Cours cours)
        {
            this.identufiantDeLetudiant = idEtudiant;
            this.prenom = prenomEtudiant;
            this.nom = nomEtudiant;
            this.note = new Notes(lettre);
            this.cours = cours;
        }

        //Accesseurs de la classe
        public int getIdentificateurEtudiant()
        {
            return this.identufiantDeLetudiant;
        }

        public string getPrenomEtudiant()
        {
            return this.prenom;
        }

        public string getNomEtudiant()
        {
            return this.nom;
        }

        public Cours getCours()
        {
            return this.cours;
        }
        public Notes getNotes()
        {
            return this.note;
        }

        //cette fontion a pour but d'afficher les étudiants et leurs données
        public void affichage()
        {
            Console.WriteLine(this.identufiantDeLetudiant.ToString().PadRight(10) + this.nom.ToString().PadRight(15) + this.prenom.ToString().PadRight(15)
                 + this.cours.getNumeroDeCours().ToString().PadRight(15) + this.cours.getTitreDeCours().ToString().PadRight(15) + this.note.getNotes().ToString().PadRight(15));
        }
    }

}

/*********************************Classe Notes************************************
**********************************************************************************
**********************************************************************************/
using System;
using System.Collections.Generic;
using System.Text;

namespace ProjetFinalAQL
{
    // Classe résponsable sur la gestion des notes des étudiants
    class Notes
    {
        //classe permet de convertir la note en chiffre à une évaluation en lettre
        private char noteEnlettre;

        //constructeur par défaut 
        public Notes()
        {
            this.noteEnlettre = 'A';
        }
        
        public Notes(char lettre)
        {
            this.noteEnlettre = lettre;
        }

        //Accesseurs de la classe Notes qui permet d'envoyer l'informtion vers le main
        public char getNotes()
        {
            return this.noteEnlettre;
        }
    }
}

/**************************Classe Cours*******************************************
**********************************************************************************
**********************************************************************************/
using System;
using System.Collections.Generic;
using System.Text;

namespace ProjetFinalAQL
{
    // Classe sert à gérer les cours de chaque étudiant
    class Cours
    {
        //classes privées contiennent les informations sur les cours
        private int numeroDeCours;
        private string titreDeCours;

        //constructeur par défaut
        public Cours()
        {
            this.numeroDeCours = 0;
            this.titreDeCours = "";
        }
        
        public Cours(int id, string titre)
        {
            this.numeroDeCours = id;
            this.titreDeCours = titre;
        }
        
        public int getNumeroDeCours()
        {
            return this.numeroDeCours;
        }
       
        public string getTitreDeCours()
        {
            return this.titreDeCours;
        }
    }
}

/************************************Main*****************************************
**********************************************************************************
**********************************************************************************/
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjetFinalAQL
{
    class Program
    {
        //La fonction menuAffichage permet à l'utilisateur de choisir parmi 3 options
        static void menuAffichage()
        {
            Console.WriteLine("\n1 - Créer un nouveau étudiant");
            Console.WriteLine("2 - Afficher la liste des étudiants");
            Console.WriteLine("3 - Quitter la console");
            Console.WriteLine("Select option =>  ");
        }

        //Fonction qui permet de créer un nouveau étudiant dans le dossier des étudiants
        static void creerUnNouveauEtudiant(Etudiant[] etudiants, int position)
        {
            //Attributs utlisés pour la création d'un nouveau étudiant
            int identificateurDeLetudiant;
            string prenom;
            string nom;
            Cours cours;
            int numeroCours;
            string nomCours;
            char lettre;
            bool symbole = false;

            Console.Write("\nEntrer l'identificateur de l'étudiant:   ");
            identificateurDeLetudiant = Convert.ToInt32(Console.ReadLine());

            //Vérification si un autre étudiant avec le même ID déjà existe
            while (symbole == false)
            {
                for (int i = 0; i < position && symbole == false; i++)
                {
                    if (etudiants[i].getIdentificateurEtudiant() == identificateurDeLetudiant)
                    {
                        symbole = true;
                    }
                }
                if (symbole == true)
                {
                    Console.Write("\nCet identificateur déjà existe, entrez un autre identificateur:   ");
                    identificateurDeLetudiant = Convert.ToInt32(Console.ReadLine());
                    symbole = false;
                }
                else
                {
                    symbole = true;
                }
            }

            /* Prendre les différents données à propos l'étudiant entrés pas l'utilisateurs et les récupérer de la console
             * La fonction Write permet d'écrire dans la console
             * la fonction ReadLine sert à récupérer les données entrés dans le console*/
            Console.Write("Entrer le prénom de l'étudiant:    ");
            prenom = (Console.ReadLine());

            Console.Write("Entrer le nom de l'étudiant:    ");
            nom = (Console.ReadLine());


            Console.Write("Entrer le numéro de cours:    ");
            numeroCours = Convert.ToInt32(Console.ReadLine());

            Console.Write("Entrer le nom du cours:    ");
            nomCours = (Console.ReadLine());

            Console.Write("Entrer la note (A-F):   ");
            lettre = Convert.ToChar(Console.ReadLine());

            //Creation d'un objet de la classe Cours
            Cours nouveauCours = new Cours(identificateurDeLetudiant, nomCours);

            //Creation d'un objet de la classe Etudiant
            Etudiant nouveauEtudiant = new Etudiant(identificateurDeLetudiant, prenom, nom, lettre, nouveauCours);
            etudiants[position] = nouveauEtudiant;

            Console.WriteLine("\nL'opération a été bien fait.\n");
        }

        //Fonction permet de mettre les données récupérés dans un dossier 
        static void ajouterLesDonneesAuDossier(Etudiant[] etudiants, int compteur)
        {
            using (StreamWriter writer = new StreamWriter("output.txt"))
            {
                for (int i = 0; i < compteur; i++)
                {
                    writer.WriteLine(etudiants[i].getIdentificateurEtudiant() + "," + etudiants[i].getPrenomEtudiant() + "," + etudiants[i].getNomEtudiant() + "," +
                        etudiants[i].getCours().getNumeroDeCours() + "," + etudiants[i].getCours().getTitreDeCours() + "," + etudiants[i].getNotes().getNotes());

                }
            }
        }

        //Fonction sert à afficher les dossiers des étudiants
        static void afficherTousLesEtudiants(Etudiant[] etudiants, int compteur)
        {
            Console.WriteLine("\n");
            Console.WriteLine("Identifiant".PadRight(10) + "Nom".ToString().PadRight(15) + "Prénom".ToString().PadRight(15)
                + "Cours".ToString().PadRight(15) + "Nom de cours".ToString().PadRight(15) + "Note".ToString().PadRight(15));
            if (compteur > 0)
            {
                for (int i = 0; i < compteur; i++)
                {
                    etudiants[i].affichage();
                }
            }
            else
            {
                Console.WriteLine("Aucun étudiant trouvé!");
            }
        }

        //la fonction principale qui prend la getion des classe du projets ainsi que l'affichage des éléments dans la console
        static void Main(string[] args)
        {
            Console.WriteLine("***************************************");

            int option = 0;

            //Récupérer la liste des étudiants dans un tableau
            Etudiant[] etudiants = new Etudiant[100];
            int position = 0;
            do
            {
                //Appeler la fonction responsable sur l'affichage du menu de debut
                menuAffichage();
                option = Convert.ToInt32(Console.ReadLine());

                //Execution de la fonction convenable basé sur le choix de l'utilisateur
                if (option == 1)
                {
                    creerUnNouveauEtudiant(etudiants, position);
                    position++;
                }
                else if (option == 2)
                {
                    afficherTousLesEtudiants(etudiants, position);
                }
                else if (option == 3)
                {
                    ajouterLesDonneesAuDossier(etudiants, position);
                }
                else
                {
                    Console.WriteLine("\nChoix invalide!\n");
                }
            }// Répéter la fonction jusqu'à que l'utilisateur choisit de quitter  
            while (option != 3);
            Console.ReadLine();
        }
    }
}
